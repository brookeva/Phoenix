Whites = B02001_002,
FemaleBachelors = B15001_050,
MaleBachelors = B15001_009,
MedHHInc = B19013_001,
MedRent = B25058_001,
TotalPoverty = B06012_002)
tracts2016PHX <-
tracts2016PHX %>%
mutate(pctWhite = ifelse(TotalPop > 0, Whites / TotalPop, 0),
pctBachelors = ifelse(TotalPop > 0, ((FemaleBachelors + MaleBachelors) / TotalPop), 0),
pctPoverty = ifelse(TotalPop > 0, TotalPoverty / TotalPop, 0),
year = "2016") %>%
dplyr::select(-Whites,-FemaleBachelors,-MaleBachelors,-TotalPoverty)
tracts2020PHX <-
get_acs(geography = "tract",
variables = c("B25026_001E","B02001_002E",
"B15001_050E","B15001_009E",
"B19013_001E","B25058_001E",
"B06012_002E"),
year=2020, state=04, county=013,
geometry=TRUE, output="wide") %>%
st_transform('ESRI:102728') %>%
rename(TotalPop = B25026_001E,
Whites = B02001_002E,
FemaleBachelors = B15001_050E,
MaleBachelors = B15001_009E,
MedHHInc = B19013_001E,
MedRent = B25058_001E,
TotalPoverty = B06012_002E) %>%
dplyr::select(-NAME, -starts_with("B")) %>%
mutate(pctWhite = ifelse(TotalPop > 0, Whites / TotalPop,0),
pctBachelors = ifelse(TotalPop > 0, ((FemaleBachelors + MaleBachelors) / TotalPop),0),
pctPoverty = ifelse(TotalPop > 0, TotalPoverty / TotalPop, 0),
year = "2020") %>%
dplyr::select(-Whites, -FemaleBachelors, -MaleBachelors, -TotalPoverty)
allTractsPHX <- rbind(tracts2016PHX,tracts2020PHX)
PHXstops <- st_read("https://services2.arcgis.com/2t1927381mhTgWNC/arcgis/rest/services/ValleyMetroLightRailRidership/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson") %>%
mutate(Line = "Valley Metro") %>%
dplyr::select(StationId, Line) %>%
st_transform('ESRI:102728')  #This was necessary in the lab, but we'll have to check what coordinate systems each set of data is in to see if we have to use this function to make CRS.
#Can only plot this once we bring in the ACS data for PHX
ggplot() +
geom_sf(data=st_union(allTractsPHX)) +
geom_sf(data=PHXstops,
aes(colour = Line),
show.legend = "point", size= 2) +
scale_colour_manual(values = c("orange","blue")) +
labs(title="Valley Metro Stops",
subtitle="Phoenix, AZ",
caption="Figure 2.5") +
mapTheme()
#Creates a buffer and unioned buffer for 1/2 mile, as the bird flys, from each stop.
PHXBuffers <-
rbind(
st_buffer(PHXstops, 2640) %>%
mutate(Legend = "Buffer") %>%
dplyr::select(Legend),
st_union(st_buffer(PHXstops, 2640)) %>%
st_sf() %>%
mutate(Legend = "Unioned Buffer"))
ggplot() +
geom_sf(data=PHXBuffers) +
geom_sf(data=PHXstops, show.legend = "point") +
facet_wrap(~Legend) +
labs(caption = "Figure 2.6") +
mapTheme()
plot(buffer)
clip <-
st_intersection(buffer, tracts2016PHX) %>%
dplyr::select(TotalPop) %>%
mutate(Selection_Type = "Clip")
clip <-
st_intersection(buffer, tracts2016PHX) %>%
dplyr::select(totalPop16PHX) %>%
mutate(Selection_Type = "Clip")
clip <-
st_intersection(buffer, tracts2016PHX) %>%
dplyr::select(totalPop16) %>%
mutate(Selection_Type = "Clip")
plot(buffer)
clip <-
st_intersection(buffer, tracts2016PHX) %>%
dplyr::select(totalPop16) %>%
mutate(Selection_Type = "Clip")
clip <-
st_intersection(buffer, tracts2016PHX) %>%
dplyr::select(totalPop16PHX) %>%
mutate(Selection_Type = "Clip")
clip <-
st_intersection(buffer, tracts2016PHX) %>%
dplyr::select(totalPop16PHX) %>%
mutate(Selection_Type = "Clip")
# approach #1: sub-setting a spatial object with a spatial object using the '[' brackets.
selection1 <-
tracts2016PHX[buffer,] %>%
dplyr::select(totalPop16PHX) %>%
mutate(Selection_Type = "Spatial Selection")
# approach #2: using `st_intersects` as a verbose way to do approach #1
selection2 <- tracts2016PHX[st_intersects(tracts2020PHX, buffer) %>% lengths > 0, ] %>%
dplyr::select(TotalPop) %>%
mutate(Selection_Type = "Spatial Selection")
# approach #3: use `st_join` to do a spatial join and remove the non-intersecting polygons
selection3 <- tracts2016PHX %>%
st_join(buffer, join = st_intersects) %>%
filter(!is.na(Legend)) %>%
dplyr::select(totalPop16PHX) %>%
mutate(Selection_Type = "Spatial Intersects")
# approach #1: sub-setting a spatial object with a spatial object using the '[' brackets.
selection1 <-
tracts2016PHX[buffer,] %>%
dplyr::select(totalPop) %>%
mutate(Selection_Type = "Spatial Selection")
selectCentroids <-
st_centroid(tracts2016PHX)[buffer,] %>%
st_drop_geometry() %>%
left_join(., dplyr::select(tracts2016PHX, GEOID), by = "GEOID") %>%
st_sf() %>%
dplyr::select(TotalPop) %>%
mutate(Selection_Type = "Select by Centroids")
ggplot() +
geom_sf(data=intersections, aes(fill = TotalPop)) +
geom_sf(data=PHXstops, show.legend = "point") +
scale_fill_viridis_c() +
facet_wrap(~Selection_Type) +
mapTheme()
clip <-
st_intersection(buffer, tracts2016PHX) %>%
dplyr::select(totalPop) %>%
mutate(Selection_Type = "Clip")
#Creates a buffer and unioned buffer for 1/2 mile, as the bird flys, from each stop.
PHXBuffers <-
rbind(
st_buffer(PHXstops, 2640) %>%
mutate(Legend = "Buffer") %>%
dplyr::select(Legend),
st_union(st_buffer(PHXstops, 2640)) %>%
st_sf() %>%
mutate(Legend = "Unioned Buffer"))
ggplot() +
geom_sf(data=PHXBuffers) +
geom_sf(data=PHXstops, show.legend = "point") +
facet_wrap(~Legend) +
labs(caption = "Figure 2.6") +
mapTheme()
clip <-
st_intersection(buffer, tracts2016PHX) %>%
dplyr::select(totalPop) %>%
mutate(Selection_Type = "Clip")
# approach #1: sub-setting a spatial object with a spatial object using the '[' brackets.
selection1 <-
tracts2016PHX[buffer,] %>%
dplyr::select(totalPop) %>%
mutate(Selection_Type = "Spatial Selection")
# approach #2: using `st_intersects` as a verbose way to do approach #1
selection2 <- tracts2016PHX[st_intersects(tracts2020PHX, buffer) %>% lengths > 0, ] %>%
dplyr::select(TotalPop) %>%
mutate(Selection_Type = "Spatial Selection")
# approach #3: use `st_join` to do a spatial join and remove the non-intersecting polygons
selection3 <- tracts2016PHX %>%
st_join(buffer, join = st_intersects) %>%
filter(!is.na(Legend)) %>%
dplyr::select(TotalPop) %>%
mutate(Selection_Type = "Spatial Intersects")
tracts2020PHX <-
get_acs(geography = "tract",
variables = c("B25026_001E","B02001_002E",
"B15001_050E","B15001_009E",
"B19013_001E","B25058_001E",
"B06012_002E"),
year=2020, state=04, county=013,
geometry=TRUE, output="wide") %>%
st_transform('ESRI:102728') %>%
rename(TotalPop = B25026_001E,
Whites = B02001_002E,
FemaleBachelors = B15001_050E,
MaleBachelors = B15001_009E,
MedHHInc = B19013_001E,
MedRent = B25058_001E,
TotalPoverty = B06012_002E) %>%
dplyr::select(-NAME, -starts_with("B")) %>%
mutate(pctWhite = ifelse(TotalPop > 0, Whites / TotalPop,0),
pctBachelors = ifelse(TotalPop > 0, ((FemaleBachelors + MaleBachelors) / TotalPop),0),
pctPoverty = ifelse(TotalPop > 0, TotalPoverty / TotalPop, 0),
year = "2020") %>%
dplyr::select(-Whites, -FemaleBachelors, -MaleBachelors, -TotalPoverty)
allTractsPHX <- rbind(tracts2016PHX,tracts2020PHX)
PHXstops <- st_read("https://services2.arcgis.com/2t1927381mhTgWNC/arcgis/rest/services/ValleyMetroLightRailRidership/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson") %>%
mutate(Line = "Valley Metro") %>%
dplyr::select(StationId, Line) %>%
st_transform('ESRI:102728')  #This was necessary in the lab, but we'll have to check what coordinate systems each set of data is in to see if we have to use this function to make CRS.
#Can only plot this once we bring in the ACS data for PHX
ggplot() +
geom_sf(data=st_union(allTractsPHX)) +
geom_sf(data=PHXstops,
aes(colour = Line),
show.legend = "point", size= 2) +
scale_colour_manual(values = c("orange","blue")) +
labs(title="Valley Metro Stops",
subtitle="Phoenix, AZ",
caption="Figure 2.5") +
mapTheme()
#Creates a buffer and unioned buffer for 1/2 mile, as the bird flys, from each stop.
PHXBuffers <-
rbind(
st_buffer(PHXstops, 2640) %>%
mutate(Legend = "Buffer") %>%
dplyr::select(Legend),
st_union(st_buffer(PHXstops, 2640)) %>%
st_sf() %>%
mutate(Legend = "Unioned Buffer"))
ggplot() +
geom_sf(data=PHXBuffers) +
geom_sf(data=PHXstops, show.legend = "point") +
facet_wrap(~Legend) +
labs(caption = "Figure 2.6") +
mapTheme()
plot(buffer)
clip <-
st_intersection(buffer, tracts2016PHX) %>%
dplyr::select(totalPop) %>%
mutate(Selection_Type = "Clip")
knitr::opts_chunk$set(echo = TRUE)
```{r setup_packages, warning = FALSE, message = FALSE}
library(tidyverse)
library(tidycensus)
library(sf)
library(kableExtra)
options(scipen=999)
options(tigris_class = "sf")
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
palette5 <- c("#f0f9e8","#bae4bc","#7bccc4","#43a2ca","#0868ac")
census_api_key("54acb9909dac90671a10390dae4d7ec7d77bb5bb", overwrite = TRUE, install = TRUE)
tracts2016PHX <-
get_acs(geography = "tract",
variables = c("B25026_001E","B02001_002E",
"B15001_050E","B15001_009E",
"B19013_001E", "B25058_001E",
"B06012_002E"),
year=2016, state=04,
county=013, geometry=TRUE) %>%
st_transform('ESRI:102728')
glimpse(tracts2016PHX)
glimpse(tracts2016PHX)
totalPop16PHX <-
tracts2016PHX %>%
filter(variable == "B25026_001")
nrow(totalPop16PHX)
names(totalPop16PHX)
head(totalPop16PHX)
glimpse(totalPop16PHX)
A <-
ggplot() +
geom_sf(data = totalPop16PHX, aes(fill = estimate)) +
theme(plot.title = element_text(size=22))
B <-
ggplot() +
geom_sf(data = totalPop16PHX, aes(fill = q5(estimate))) +
theme(plot.title = element_text(size=22))
C <-
ggplot() +
geom_sf(data = totalPop16PHX, aes(fill = q5(estimate))) +
scale_fill_manual(values = palette5,
labels = qBr(totalPop16PHX, "estimate"),
name = "Total\nPopluation\n(Quintile Breaks)") +
theme(plot.title = element_text(size=22))
D <-
ggplot() +
geom_sf(data = totalPop16PHX, aes(fill = q5(estimate))) +
scale_fill_manual(values = palette5,
labels = qBr(totalPop16PHX, "estimate"),
name = "Popluation\n(Quintile Breaks)") +
labs(title = "Total Population", subtitle = "Phoenix; 2016") +
mapTheme() + theme(plot.title = element_text(size=22))
tracts2016PHX <-
tracts2016PHX %>%
dplyr::select( -NAME, -moe) %>%
spread(key = variable, value = estimate) %>%
rename(TotalPop = B25026_001,
Whites = B02001_002,
FemaleBachelors = B15001_050,
MaleBachelors = B15001_009,
MedHHInc = B19013_001,
MedRent = B25058_001,
TotalPoverty = B06012_002)
tracts2016PHX <-
tracts2016PHX %>%
mutate(pctWhite = ifelse(TotalPop > 0, Whites / TotalPop, 0),
pctBachelors = ifelse(TotalPop > 0, ((FemaleBachelors + MaleBachelors) / TotalPop), 0),
pctPoverty = ifelse(TotalPop > 0, TotalPoverty / TotalPop, 0),
year = "2016") %>%
dplyr::select(-Whites,-FemaleBachelors,-MaleBachelors,-TotalPoverty)
tracts2016PHX <-
tracts2016PHX %>%
mutate(pctWhite = ifelse(TotalPop > 0, Whites / TotalPop, 0),
pctBachelors = ifelse(TotalPop > 0, ((FemaleBachelors + MaleBachelors) / TotalPop), 0),
pctPoverty = ifelse(TotalPop > 0, TotalPoverty / TotalPop, 0),
year = "2016") %>%
dplyr::select(-Whites,-FemaleBachelors,-MaleBachelors,-TotalPoverty)
tracts2016PHX <-
tracts2016PHX %>%
dplyr::select( -NAME, -moe) %>%
spread(key = variable, value = estimate) %>%
rename(TotalPop = B25026_001,
Whites = B02001_002,
FemaleBachelors = B15001_050,
MaleBachelors = B15001_009,
MedHHInc = B19013_001,
MedRent = B25058_001,
TotalPoverty = B06012_002)
D <-
ggplot() +
geom_sf(data = totalPop16PHX, aes(fill = q5(estimate))) +
scale_fill_manual(values = palette5,
labels = qBr(totalPop16PHX, "estimate"),
name = "Popluation\n(Quintile Breaks)") +
labs(title = "Total Population", subtitle = "Phoenix; 2016") +
mapTheme() + theme(plot.title = element_text(size=22))
tracts2016PHX <-
tracts2016PHX %>%
dplyr::select( -NAME, -moe) %>%
spread(key = variable, value = estimate) %>%
rename(TotalPop = B25026_001,
Whites = B02001_002,
FemaleBachelors = B15001_050,
MaleBachelors = B15001_009,
MedHHInc = B19013_001,
MedRent = B25058_001,
TotalPoverty = B06012_002)
A <-
ggplot() +
geom_sf(data = totalPop16PHX, aes(fill = estimate)) +
theme(plot.title = element_text(size=22))
B <-
ggplot() +
geom_sf(data = totalPop16PHX, aes(fill = q5(estimate))) +
theme(plot.title = element_text(size=22))
C <-
ggplot() +
geom_sf(data = totalPop16PHX, aes(fill = q5(estimate))) +
scale_fill_manual(values = palette5,
labels = qBr(totalPop16PHX, "estimate"),
name = "Total\nPopluation\n(Quintile Breaks)") +
theme(plot.title = element_text(size=22))
D <-
ggplot() +
geom_sf(data = totalPop16PHX, aes(fill = q5(estimate))) +
scale_fill_manual(values = palette5,
labels = qBr(totalPop16PHX, "estimate"),
name = "Popluation\n(Quintile Breaks)") +
labs(title = "Total Population", subtitle = "Phoenix; 2016") +
mapTheme() + theme(plot.title = element_text(size=22))
tracts2016PHX <-
tracts2016PHX %>%
dplyr::select( -NAME, -moe) %>%
spread(key = variable, value = estimate) %>%
rename(TotalPop = B25026_001,
Whites = B02001_002,
FemaleBachelors = B15001_050,
MaleBachelors = B15001_009,
MedHHInc = B19013_001,
MedRent = B25058_001,
TotalPoverty = B06012_002)
tracts2016PHX <-
tracts2016PHX %>%
mutate(pctWhite = ifelse(TotalPop > 0, Whites / TotalPop, 0),
pctBachelors = ifelse(TotalPop > 0, ((FemaleBachelors + MaleBachelors) / TotalPop), 0),
pctPoverty = ifelse(TotalPop > 0, TotalPoverty / TotalPop, 0),
year = "2016") %>%
dplyr::select(-Whites,-FemaleBachelors,-MaleBachelors,-TotalPoverty)
totalPop16PHX <-
tracts2016PHX %>%
filter(variable == "B25026_001")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidycensus)
library(sf)
library(kableExtra)
options(scipen=999)
options(tigris_class = "sf")
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
palette5 <- c("#f0f9e8","#bae4bc","#7bccc4","#43a2ca","#0868ac")
census_api_key("54acb9909dac90671a10390dae4d7ec7d77bb5bb", overwrite = TRUE, install = TRUE)
tracts2016PHX <-
get_acs(geography = "tract",
variables = c("B25026_001E","B02001_002E",
"B15001_050E","B15001_009E",
"B19013_001E", "B25058_001E",
"B06012_002E"),
year=2016, state=04,
county=013, geometry=TRUE) %>%
st_transform('ESRI:102728')
tracts2016PHX <-
get_acs(geography = "tract",
variables = c("B25026_001E","B02001_002E",
"B15001_050E","B15001_009E",
"B19013_001E", "B25058_001E",
"B06012_002E"),
year=2016, state=04,
county=013, geometry=TRUE) %>%
st_transform('ESRI:102728')
glimpse(tracts2016PHX)
totalPop16PHX <-
tracts2016PHX %>%
filter(variable == "B25026_001")
nrow(totalPop16PHX)
names(totalPop16PHX)
head(totalPop16PHX)
glimpse(totalPop16PHX)
A <-
ggplot() +
geom_sf(data = totalPop16PHX, aes(fill = estimate)) +
theme(plot.title = element_text(size=22))
B <-
ggplot() +
geom_sf(data = totalPop16PHX, aes(fill = q5(estimate))) +
theme(plot.title = element_text(size=22))
C <-
ggplot() +
geom_sf(data = totalPop16PHX, aes(fill = q5(estimate))) +
scale_fill_manual(values = palette5,
labels = qBr(totalPop16PHX, "estimate"),
name = "Total\nPopluation\n(Quintile Breaks)") +
theme(plot.title = element_text(size=22))
D <-
ggplot() +
geom_sf(data = totalPop16PHX, aes(fill = q5(estimate))) +
scale_fill_manual(values = palette5,
labels = qBr(totalPop16PHX, "estimate"),
name = "Popluation\n(Quintile Breaks)") +
labs(title = "Total Population", subtitle = "Phoenix; 2016") +
mapTheme() + theme(plot.title = element_text(size=22))
tracts2016PHX <-
tracts2016PHX %>%
dplyr::select( -NAME, -moe) %>%
spread(key = variable, value = estimate) %>%
rename(TotalPop = B25026_001,
Whites = B02001_002,
FemaleBachelors = B15001_050,
MaleBachelors = B15001_009,
MedHHInc = B19013_001,
MedRent = B25058_001,
TotalPoverty = B06012_002)
tracts2016PHX <-
tracts2016PHX %>%
mutate(pctWhite = ifelse(TotalPop > 0, Whites / TotalPop, 0),
pctBachelors = ifelse(TotalPop > 0, ((FemaleBachelors + MaleBachelors) / TotalPop), 0),
pctPoverty = ifelse(TotalPop > 0, TotalPoverty / TotalPop, 0),
year = "2016") %>%
dplyr::select(-Whites,-FemaleBachelors,-MaleBachelors,-TotalPoverty)
tracts2020PHX <-
get_acs(geography = "tract",
variables = c("B25026_001E","B02001_002E",
"B15001_050E","B15001_009E",
"B19013_001E","B25058_001E",
"B06012_002E"),
year=2020, state=04, county=013,
geometry=TRUE, output="wide") %>%
st_transform('ESRI:102728') %>%
rename(TotalPop = B25026_001E,
Whites = B02001_002E,
FemaleBachelors = B15001_050E,
MaleBachelors = B15001_009E,
MedHHInc = B19013_001E,
MedRent = B25058_001E,
TotalPoverty = B06012_002E) %>%
dplyr::select(-NAME, -starts_with("B")) %>%
mutate(pctWhite = ifelse(TotalPop > 0, Whites / TotalPop,0),
pctBachelors = ifelse(TotalPop > 0, ((FemaleBachelors + MaleBachelors) / TotalPop),0),
pctPoverty = ifelse(TotalPop > 0, TotalPoverty / TotalPop, 0),
year = "2020") %>%
dplyr::select(-Whites, -FemaleBachelors, -MaleBachelors, -TotalPoverty)
allTractsPHX <- rbind(tracts2016PHX,tracts2020PHX)
PHXstops <- st_read("https://services2.arcgis.com/2t1927381mhTgWNC/arcgis/rest/services/ValleyMetroLightRailRidership/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson") %>%
mutate(Line = "Valley Metro") %>%
dplyr::select(StationId, Line) %>%
st_transform('ESRI:102728')  #This was necessary in the lab, but we'll have to check what coordinate systems each set of data is in to see if we have to use this function to make CRS.
#Can only plot this once we bring in the ACS data for PHX
ggplot() +
geom_sf(data=st_union(allTractsPHX)) +
geom_sf(data=PHXstops,
aes(colour = Line),
show.legend = "point", size= 2) +
scale_colour_manual(values = c("orange","blue")) +
labs(title="Valley Metro Stops",
subtitle="Phoenix, AZ",
caption="Figure 2.5") +
mapTheme()
#Creates a buffer and unioned buffer for 1/2 mile, as the bird flys, from each stop.
PHXBuffers <-
rbind(
st_buffer(PHXstops, 2640) %>%
mutate(Legend = "Buffer") %>%
dplyr::select(Legend),
st_union(st_buffer(PHXstops, 2640)) %>%
st_sf() %>%
mutate(Legend = "Unioned Buffer"))
ggplot() +
geom_sf(data=PHXBuffers) +
geom_sf(data=PHXstops, show.legend = "point") +
facet_wrap(~Legend) +
labs(caption = "Figure 2.6") +
mapTheme()
plot(buffer)
clip <-
st_intersection(buffer, tracts2016PHX) %>%
dplyr::select(TotalPop) %>%
mutate(Selection_Type = "Clip")
clip <-
st_intersection(buffer, tracts2016PHX) %>%
dplyr::select(TotalPop) %>%
mutate(Selection_Type = "Clip")
