library(tidycensus)
library(sf)
library(kableExtra)
options(scipen=999)
options(tigris_class = "sf")
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
palette5 <- c("#f0f9e8","#bae4bc","#7bccc4","#43a2ca","#0868ac")
palette5 <- c("#f0f9e8","#bae4bc","#7bccc4","#43a2ca","#0868ac")
```{r load_key, warning = FALSE, eval = FALSE}
census_api_key("54acb9909dac90671a10390dae4d7ec7d77bb5bb", overwrite = TRUE, install = TRUE)
census_api_key("54acb9909dac90671a10390dae4d7ec7d77bb5bb", overwrite = TRUE, install = TRUE)
tracts2016PHX <-
get_acs(geography = "tract",
variables = c("B25026_001E","B02001_002E",
"B15001_050E","B15001_009E",
"B19013_001E", "B25058_001E",
"B06012_002E"),
year=2016, state=04,
county=013, geometry=TRUE) %>%
st_transform('ESRI:102728')
glimpse(tracts2016PHX)
totalPop16PHX <-
tracts2016PHX %>%
filter(variable == "B25026_001")
nrow(totalPop16PHX)
names(totalPop16PHX)
head(totalPop16PHX)
glimpse(totalPop16PHX)
A <-
ggplot() +
geom_sf(data = totalPop16PHX, aes(fill = estimate)) +
theme(plot.title = element_text(size=22))
B <-
ggplot() +
geom_sf(data = totalPop16PHX, aes(fill = q5(estimate))) +
theme(plot.title = element_text(size=22))
C <-
ggplot() +
geom_sf(data = totalPop16PHX, aes(fill = q5(estimate))) +
scale_fill_manual(values = palette5,
labels = qBr(totalPop16PHX, "estimate"),
name = "Total\nPopluation\n(Quintile Breaks)") +
theme(plot.title = element_text(size=22))
D <-
ggplot() +
geom_sf(data = totalPop16PHX, aes(fill = q5(estimate))) +
scale_fill_manual(values = palette5,
labels = qBr(totalPop16PHX, "estimate"),
name = "Popluation\n(Quintile Breaks)") +
labs(title = "Total Population", subtitle = "Phoenix; 2016") +
mapTheme() + theme(plot.title = element_text(size=22))
tracts2016PHX <-
tracts2016PHX %>%
dplyr::select( -NAME, -moe) %>%
spread(key = variable, value = estimate) %>%
rename(TotalPop = B25026_001,
Whites = B02001_002,
FemaleBachelors = B15001_050,
MaleBachelors = B15001_009,
MedHHInc = B19013_001,
MedRent = B25058_001,
TotalPoverty = B06012_002)
tracts2016PHX <-
tracts2016PHX %>%
mutate(pctWhite = ifelse(TotalPop > 0, Whites / TotalPop, 0),
pctBachelors = ifelse(TotalPop > 0, ((FemaleBachelors + MaleBachelors) / TotalPop), 0),
pctPoverty = ifelse(TotalPop > 0, TotalPoverty / TotalPop, 0),
year = "2016") %>%
dplyr::select(-Whites,-FemaleBachelors,-MaleBachelors,-TotalPoverty)
tracts2020PHX <-
get_acs(geography = "tract",
variables = c("B25026_001E","B02001_002E",
"B15001_050E","B15001_009E",
"B19013_001E","B25058_001E",
"B06012_002E"),
year=2020, state=42, county=101,
geometry=TRUE, output="wide") %>%
st_transform('ESRI:102728') %>%
rename(TotalPop = B25026_001E,
Whites = B02001_002E,
FemaleBachelors = B15001_050E,
MaleBachelors = B15001_009E,
MedHHInc = B19013_001E,
MedRent = B25058_001E,
TotalPoverty = B06012_002E) %>%
dplyr::select(-NAME, -starts_with("B")) %>%
mutate(pctWhite = ifelse(TotalPop > 0, Whites / TotalPop,0),
pctBachelors = ifelse(TotalPop > 0, ((FemaleBachelors + MaleBachelors) / TotalPop),0),
pctPoverty = ifelse(TotalPop > 0, TotalPoverty / TotalPop, 0),
year = "2020") %>%
dplyr::select(-Whites, -FemaleBachelors, -MaleBachelors, -TotalPoverty)
allTractsPHX <- rbind(tracts2016PHX,tracts2020PHX)
PHXstops <- st_read("https://services2.arcgis.com/2t1927381mhTgWNC/arcgis/rest/services/ValleyMetroLightRailRidership/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson")
PHXstops <- st_read("https://services2.arcgis.com/2t1927381mhTgWNC/arcgis/rest/services/ValleyMetroLightRailRidership/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson")
ggplot() +
geom_sf(data=PHXstops)
#Can only plot this once we bring in the ACS data for PHX
ggplot() +
geom_sf(data=st_union(allTractsPHX)) +
geom_sf(data=PHXstops,
aes(colour = line),
show.legend = "point", size= 2) +
scale_colour_manual(values = c("orange","blue")) +
labs(title="PHX Stops",
subtitle="Phoenix, AZ",
caption="Figure 2.5") +
mapTheme()
#Can only plot this once we bring in the ACS data for PHX
ggplot() +
geom_sf(data=st_union(allTractsPHX)) +
geom_sf(data=PHXstops,
aes(colour = PHXstops),
show.legend = "point", size= 2) +
scale_colour_manual(values = c("orange","blue")) +
labs(title="PHX Stops",
subtitle="Phoenix, AZ",
caption="Figure 2.5") +
mapTheme()
#Can only plot this once we bring in the ACS data for PHX
ggplot() +
geom_sf(data=st_union(allTractsPHX)) +
geom_sf(data=PHXstops,
aes(colour = blue),
show.legend = "point", size= 2) +
scale_colour_manual(values = c("orange","blue")) +
labs(title="PHX Stops",
subtitle="Phoenix, AZ",
caption="Figure 2.5") +
mapTheme()
#Can only plot this once we bring in the ACS data for PHX
ggplot() +
geom_sf(data=st_union(allTractsPHX)) +
geom_sf(data=PHXstops,
aes(colour = PHXstops),
show.legend = "point", size= 2) +
scale_colour_manual(values = c("orange","blue")) +
labs(title="PHX Stops",
subtitle="Phoenix, AZ",
caption="Figure 2.5") +
mapTheme()
PHXstops <- st_read("https://services2.arcgis.com/2t1927381mhTgWNC/arcgis/rest/services/ValleyMetroLightRailRidership/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson")
PHXstops <- st_read("https://services2.arcgis.com/2t1927381mhTgWNC/arcgis/rest/services/ValleyMetroLightRailRidership/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson")
ggplot() +
geom_sf(data=PHXstops)
#Can only plot this once we bring in the ACS data for PHX
ggplot() +
geom_sf(data=st_union(allTractsPHX)) +
geom_sf(data=PHXstops,
aes(colour = PHXstops),
show.legend = "point", size= 2) +
scale_colour_manual(values = c("orange","blue")) +
labs(title="PHX Stops",
subtitle="Phoenix, AZ",
caption="Figure 2.5") +
mapTheme()
#Can only plot this once we bring in the ACS data for PHX
ggplot() +
geom_sf(data=st_union(allTractsPHX)) +
geom_sf(data=PHXstops,
aes(colour = StationID),
show.legend = "point", size= 2) +
scale_colour_manual(values = c("orange","blue")) +
labs(title="PHX Stops",
subtitle="Phoenix, AZ",
caption="Figure 2.5") +
mapTheme()
mapTheme()
#Creates a buffer and unioned buffer for 1/2 mile, as the bird flys, from each stop.
PHXBuffers <-
rbind(
st_buffer(PHXstops, 2640) %>%
mutate(Legend = "Buffer") %>%
dplyr::select(Legend),
st_union(st_buffer(PHXstops, 2640)) %>%
st_sf() %>%
mutate(Legend = "Unioned Buffer"))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
## Why Start With Indicators?
from Steif (2021), [Section
-   A *relatable* indicator is typically motivated by a pressing policy
-   A *simple* indicator may be used as an exploratory tool in place of
-   A *relative* indicator draws a contrast. "How can New York City
-   A *good* indicator typically generates more questions than answers.
In this lab we will walk through:
1.  Use {tidycensus} to gather ACS data for two different years
2.  Visualize data and maps with {ggplot2}
3.  Use the {sf} package for geospatial operations such as **union**,
4.  Use maps and tables to analyze change over time *given* the products
### Load packages and functions
```{r setup_packages, warning = FALSE, message = FALSE}
library(tidyverse)
library(tidycensus)
library(sf)
library(kableExtra)
options(scipen=999)
options(tigris_class = "sf")
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
palette5 <- c("#f0f9e8","#bae4bc","#7bccc4","#43a2ca","#0868ac")
census_api_key("YOUR KEY GOES HERE", overwrite = TRUE)
tracts16 <-
get_acs(geography = "tract",
variables = c("B25026_001E","B02001_002E",
"B15001_050E","B15001_009E",
"B19013_001E", "B25058_001E",
"B06012_002E"),
year=2016, state=42,
county=101, geometry=TRUE) %>%
st_transform('ESRI:102728')
census_api_key("YOUR KEY GOES HERE", overwrite = TRUE)
tracts16 <-
get_acs(geography = "tract",
variables = c("B25026_001E","B02001_002E",
"B15001_050E","B15001_009E",
"B19013_001E", "B25058_001E",
"B06012_002E"),
year=2016, state=42,
county=101, geometry=TRUE) %>%
st_transform('ESRI:102728')
census_api_key("e79f3706b6d61249968c6ce88794f6f556e5bf3d", overwrite = TRUE)
tracts16 <-
get_acs(geography = "tract",
variables = c("B25026_001E","B02001_002E",
"B15001_050E","B15001_009E",
"B19013_001E", "B25058_001E",
"B06012_002E"),
year=2016, state=42,
county=101, geometry=TRUE) %>%
st_transform('ESRI:102728')
glimpse(tracts16)
totalPop16 <-
tracts16 %>%
filter(variable == "B25026_001")
nrow(totalPop16)
names(totalPop16)
head(totalPop16)
glimpse(totalPop16)
A <-
ggplot() +
geom_sf(data = totalPop16, aes(fill = estimate)) +
theme(plot.title = element_text(size=22))
B <-
ggplot() +
geom_sf(data = totalPop16, aes(fill = q5(estimate))) +
theme(plot.title = element_text(size=22))
C <-
ggplot() +
geom_sf(data = totalPop16, aes(fill = q5(estimate))) +
scale_fill_manual(values = palette5,
labels = qBr(totalPop16, "estimate"),
name = "Total\nPopluation\n(Quintile Breaks)") +
theme(plot.title = element_text(size=22))
D <-
ggplot() +
geom_sf(data = totalPop16, aes(fill = q5(estimate))) +
scale_fill_manual(values = palette5,
labels = qBr(totalPop16, "estimate"),
name = "Popluation\n(Quintile Breaks)") +
labs(title = "Total Population", subtitle = "Philadelphia; 2016") +
mapTheme() + theme(plot.title = element_text(size=22))
D <-
ggplot() +
geom_sf(data = totalPop16, aes(fill = q5(estimate))) +
scale_fill_manual(values = palette5,
labels = qBr(totalPop16, "estimate"),
name = "Popluation\n(Quintile Breaks)") +
labs(title = "Total Population", subtitle = "Philadelphia; 2016") +
mapTheme() + theme(plot.title = element_text(size=22))
tracts16 <-
tracts16 %>%
dplyr::select( -NAME, -moe) %>%
spread(variable, estimate) %>%
rename(TotalPop = B25026_001,
Whites = B02001_002,
FemaleBachelors = B15001_050,
MaleBachelors = B15001_009,
MedHHInc = B19013_001,
MedRent = B25058_001,
TotalPoverty = B06012_002)
tracts16 <-
tracts16 %>%
mutate(pctWhite = ifelse(TotalPop > 0, Whites / TotalPop, 0),
pctBachelors = ifelse(TotalPop > 0, ((FemaleBachelors + MaleBachelors) / TotalPop), 0),
pctPoverty = ifelse(TotalPop > 0, TotalPoverty / TotalPop, 0),
year = "2016") %>%
dplyr::select(-Whites,-FemaleBachelors,-MaleBachelors,-TotalPoverty)
tracts20 <-
get_acs(geography = "tract",
variables = c("B25026_001E","B02001_002E",
"B15001_050E","B15001_009E",
"B19013_001E","B25058_001E",
"B06012_002E"),
year=2020, state=42, county=101,
geometry=TRUE, output="wide") %>%
st_transform('ESRI:102728') %>%
rename(TotalPop = B25026_001E,
Whites = B02001_002E,
FemaleBachelors = B15001_050E,
MaleBachelors = B15001_009E,
MedHHInc = B19013_001E,
MedRent = B25058_001E,
TotalPoverty = B06012_002E) %>%
dplyr::select(-NAME, -starts_with("B")) %>%
mutate(pctWhite = ifelse(TotalPop > 0, Whites / TotalPop,0),
pctBachelors = ifelse(TotalPop > 0, ((FemaleBachelors + MaleBachelors) / TotalPop),0),
pctPoverty = ifelse(TotalPop > 0, TotalPoverty / TotalPop, 0),
year = "2020") %>%
dplyr::select(-Whites, -FemaleBachelors, -MaleBachelors, -TotalPoverty)
allTracts <- rbind(tracts16,tracts20)
allTracts <- rbind(tracts16,tracts20)
septaStops <-
rbind(
st_read("https://opendata.arcgis.com/datasets/8c6e2575c8ad46eb887e6bb35825e1a6_0.geojson") %>%
mutate(Line = "El") %>%
dplyr::select(Station, Line),
st_read("https://opendata.arcgis.com/datasets/2e9037fd5bef406488ffe5bb67d21312_0.geojson") %>%
mutate(Line ="Broad_St") %>%
dplyr::select(Station, Line)) %>%
st_transform(st_crs(tracts16))
st_transform(st_crs(tracts16))  #This was necessary in the lab, but we'll have to check what coordinate systems each set of data is in to see if we have to use this function to make CRS.
st_transform(st_crs(allTractsPHX))  #This was necessary in the lab, but we'll have to check what coordinate systems each set of data is in to see if we have to use this function to make CRS.
PHXstops <- st_read("https://services2.arcgis.com/2t1927381mhTgWNC/arcgis/rest/services/ValleyMetroLightRailRidership/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson")
st_transform(st_crs(allTractsPHX))  #This was necessary in the lab, but we'll have to check what coordinate systems each set of data is in to see if we have to use this function to make CRS.
septaStops <-
rbind(
st_read("https://opendata.arcgis.com/datasets/8c6e2575c8ad46eb887e6bb35825e1a6_0.geojson") %>%
mutate(Line = "El") %>%
dplyr::select(Station, Line),
st_read("https://opendata.arcgis.com/datasets/2e9037fd5bef406488ffe5bb67d21312_0.geojson") %>%
mutate(Line ="Broad_St") %>%
dplyr::select(Station, Line)) %>%
st_transform(st_crs(tracts16))
PHXstops <- st_read("https://services2.arcgis.com/2t1927381mhTgWNC/arcgis/rest/services/ValleyMetroLightRailRidership/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson")
PHXstops <- st_read("https://services2.arcgis.com/2t1927381mhTgWNC/arcgis/rest/services/ValleyMetroLightRailRidership/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson")
septaStops <-
rbind(
st_read("https://opendata.arcgis.com/datasets/8c6e2575c8ad46eb887e6bb35825e1a6_0.geojson") %>%
mutate(Line = "El") %>%
dplyr::select(Station, Line),
st_read("https://opendata.arcgis.com/datasets/2e9037fd5bef406488ffe5bb67d21312_0.geojson") %>%
mutate(Line ="Broad_St") %>%
dplyr::select(Station, Line)) %>%
st_transform(st_crs(tracts16))
st_transform(st_crs(allTractsPHX))  #This was necessary in the lab, but we'll have to check what coordinate systems each set of data is in to see if we have to use this function to make CRS.
st_transform(st_crs(PHXstops))  #This was necessary in the lab, but we'll have to check what coordinate systems each set of data is in to see if we have to use this function to make CRS.
PHXstops <- st_read("https://services2.arcgis.com/2t1927381mhTgWNC/arcgis/rest/services/ValleyMetroLightRailRidership/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson")
PHXstops <- st_read("https://services2.arcgis.com/2t1927381mhTgWNC/arcgis/rest/services/ValleyMetroLightRailRidership/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson")
st_transform(st_crs(PHXstops))  #This was necessary in the lab, but we'll have to check what coordinate systems each set of data is in to see if we have to use this function to make CRS.
ggplot() +
geom_sf(data=PHXstops)
mapTheme()
ggplot() +
geom_sf(data=st_union(tracts16)) +
geom_sf(data=septaStops,
aes(colour = Line),
show.legend = "point", size= 2) +
scale_colour_manual(values = c("orange","blue")) +
labs(title="Septa Stops",
subtitle="Philadelphia, PA",
caption="Figure 2.5") +
mapTheme()
septaStops <-
rbind(
st_read("https://opendata.arcgis.com/datasets/8c6e2575c8ad46eb887e6bb35825e1a6_0.geojson") %>%
mutate(Line = "El") %>%
dplyr::select(Station, Line),
st_read("https://opendata.arcgis.com/datasets/2e9037fd5bef406488ffe5bb67d21312_0.geojson") %>%
mutate(Line ="Broad_St") %>%
dplyr::select(Station, Line)) %>%
st_transform(st_crs(tracts16))
septaStops <-
rbind(
st_read("https://opendata.arcgis.com/datasets/8c6e2575c8ad46eb887e6bb35825e1a6_0.geojson") %>%
mutate(Line = "El") %>%
dplyr::select(Station, Line),
st_read("https://opendata.arcgis.com/datasets/2e9037fd5bef406488ffe5bb67d21312_0.geojson") %>%
mutate(Line ="Broad_St") %>%
dplyr::select(Station, Line)) %>%
st_transform(st_crs(tracts16))
st_transform(st_crs(PHXstops))  #This was necessary in the lab, but we'll have to check what coordinate systems each set of data is in to see if we have to use this function to make CRS.
PHXstops <- st_read("https://services2.arcgis.com/2t1927381mhTgWNC/arcgis/rest/services/ValleyMetroLightRailRidership/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson")
PHXstops <- st_read("https://services2.arcgis.com/2t1927381mhTgWNC/arcgis/rest/services/ValleyMetroLightRailRidership/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson")
mapTheme()
mapTheme()
#Creates a buffer and unioned buffer for 1/2 mile, as the bird flys, from each stop.
PHXBuffers <-
rbind(
st_buffer(PHXstops, 2640) %>%
mutate(Legend = "Buffer") %>%
dplyr::select(Legend),
st_union(st_buffer(PHXstops, 2640)) %>%
st_sf() %>%
mutate(Legend = "Unioned Buffer"))
ggplot() +
geom_sf(data=PHXBuffers) +
geom_sf(data=PHXstops, show.legend = "point") +
facet_wrap(~Legend) +
labs(caption = "Figure 2.6") +
mapTheme()
#Creates buffer feature that we can use to select ACS tracts.
buffer <- filter(PHXBuffers, Legend=="Unioned Buffer")
clip <-
st_intersection(buffer, tracts2016PHX) %>%
dplyr::select(totalPop16PHX) %>%
mutate(Selection_Type = "Clip")
# approach #1: sub-setting a spatial object with a spatial object using the '[' brackets.
selection1 <-
tracts2016PHX[buffer,] %>%
dplyr::select(totalPop16PHX) %>%
mutate(Selection_Type = "Spatial Selection")
# approach #2: using `st_intersects` as a verbose way to do approach #1
selection2 <- tracts2016PHX[st_intersects(tracts2020PHX, buffer) %>% lengths > 0, ] %>%
dplyr::select(totalPop16PHX) %>%
mutate(Selection_Type = "Spatial Selection")
# approach #3: use `st_join` to do a spatial join and remove the non-intersecting polygons
selection3 <- tracts2016PHX %>%
st_join(buffer, join = st_intersects) %>%
filter(!is.na(Legend)) %>%
dplyr::select(TotalPop) %>%
mutate(Selection_Type = "Spatial Intersects")
selectCentroids <-
st_centroid(tracts16)[buffer,] %>%
st_drop_geometry() %>%
left_join(., dplyr::select(tracts16, GEOID), by = "GEOID") %>%
st_sf() %>%
dplyr::select(TotalPop) %>%
mutate(Selection_Type = "Select by Centroids")
ggplot() +
geom_sf(data=intersections, aes(fill = TotalPop)) +
geom_sf(data=septaStops, show.legend = "point") +
scale_fill_viridis_c() +
facet_wrap(~Selection_Type) +
mapTheme()
allTracts.group <-
rbind(
st_centroid(allTracts)[buffer,] %>%
st_drop_geometry() %>%
left_join(allTracts) %>%
st_sf() %>%
mutate(TOD = "TOD"),
st_centroid(allTracts)[buffer, op = st_disjoint] %>%
st_drop_geometry() %>%
left_join(allTracts) %>%
st_sf() %>%
mutate(TOD = "Non-TOD")) %>%
mutate(MedRent.inf = ifelse(year == "2009", MedRent * 1.14, MedRent))
kable(allTracts.Summary) %>%
kable_styling() %>%
footnote(general_title = "\n",
general = "Table 2.2")
allTracts.Summary <-
st_drop_geometry(allTracts.group) %>%
group_by(year, TOD) %>%
summarize(Rent = mean(MedRent, na.rm = T),
Population = mean(TotalPop, na.rm = T),
Percent_White = mean(pctWhite, na.rm = T),
Percent_Bach = mean(pctBachelors, na.rm = T),
Percent_Poverty = mean(pctPoverty, na.rm = T))
allTracts.Summary %>%
unite(year.TOD, year, TOD, sep = ": ", remove = T) %>%
gather(Variable, Value, -year.TOD) %>%
mutate(Value = round(Value, 2)) %>%
spread(year.TOD, Value) %>%
kable() %>%
kable_styling() %>%
footnote(general_title = "\n",
general = "Table 2.3")
allTracts.Summary %>%
gather(Variable, Value, -year, -TOD) %>%
ggplot(aes(year, Value, fill = TOD)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~Variable, scales = "free", ncol=5) +
scale_fill_manual(values = c("#bae4bc", "#0868ac")) +
labs(title = "Indicator differences across time and space") +
plotTheme() + theme(legend.position="bottom")
centerCity <-
st_intersection(
st_buffer(filter(septaStops, Line == "El"), 2640) %>% st_union(),
st_buffer(filter(septaStops, Line == "Broad_St"), 2640) %>% st_union()) %>%
st_sf() %>%
mutate(Submarket = "Center City")
el <-
st_buffer(filter(septaStops, Line == "El"), 2640) %>% st_union() %>%
st_sf() %>%
st_difference(centerCity) %>%
mutate(Submarket = "El")
broad.st <-
st_buffer(filter(septaStops, Line == "Broad_St"), 2640) %>% st_union() %>%
st_sf() %>%
st_difference(centerCity) %>%
mutate(Submarket = "Broad Street")
allTracts.threeMarkets <-
st_join(st_centroid(allTracts), threeMarkets) %>%
st_drop_geometry() %>%
left_join(allTracts) %>%
mutate(Submarket = replace_na(Submarket, "Non-TOD")) %>%
st_sf()
allTracts.rings <-
st_join(st_centroid(dplyr::select(allTracts, GEOID, year)),
multipleRingBuffer(st_union(septaStops), 47520, 2640)) %>%
st_drop_geometry() %>%
left_join(dplyr::select(allTracts, GEOID, MedRent, year),
by=c("GEOID"="GEOID", "year"="year")) %>%
st_sf() %>%
mutate(distance = distance / 5280) #convert to miles
ggplot() +
geom_sf(data=multipleRingBuffer(st_union(septaStops), 47520, 2640)) +
geom_sf(data=septaStops, size=1) +
geom_sf(data=st_union(tracts20), fill=NA, size=1.2) +
labs(title="Half mile buffers") +
mapTheme()
